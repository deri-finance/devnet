{"version":3,"sources":["../../src/index.ts","../node_modules/eth-provider/browser.js","../node_modules/eth-provider/resolve/index.js","../node_modules/eth-provider/provider/index.js","../node_modules/ethereum-provider/index.js","../node_modules/eth-provider/ConnectionManager/index.js","../node_modules/eth-provider/presets/index.js","../node_modules/eth-provider/connections/injected.js","../node_modules/eth-provider/connections/unavailable.js","../node_modules/eth-provider/connections/ws.js","../node_modules/eth-provider/parse/index.js","../node_modules/eth-provider/connections/http.js"],"names":["AbstractConnector","supportedChainIds","emitUpdate","console","ConnectorEvent","emitError","emitDeactivate","resolve","require","provider","presets","injected","ethereum","window","web3","currentProvider","ws","WebSocket","XHR","XMLHttpRequest","__isProvider","connections","ipc","http","module","exports","targets","options","getProtocol","location","endsWith","startsWith","concat","map","type","protocol","filter","log","EventEmitter","EthereumProvider","ConnectionManager","monitor","update","status","emit","check","inSetup","setTimeout","send","on","t","indexOf","setMaxListeners","connection","connected","nextId","promises","subscriptions","checkConnection","payload","id","method","error","result","reject","params","subscription","event","listener","attemptedNetworkSubscription","startNetworkSubscription","attemptedAccountsSubscription","startAccountsSubscription","this","_send","listenerCount","subscribe","networkChanged","netId","warn","accountsChanged","accounts","Promise","then","length","coinbase","err","Error","code","catch","Array","jsonrpc","promise","requests","all","push","success","_id","removeAllListeners","cb","sendAsyncBatch","_sendBatch","results","entry","index","close","forEach","interval","name","connect","message","connectionError","summary","closing","refresh","target","data","toFixed","clearTimeout","connectTimer","closed","frame","direct","infura","infuraRopsten","infuraRinkeby","infuraKovan","InjectedConnection","_injected","UnavailableConnection","parse","WebSocketConnection","_WebSocket","url","create","socket","e","addEventListener","payloads","load","isArray","onClose","readyState","CONNECTING","_","JSON","stringify","last","timeout","res","values","replace","split","uuid","HTTPConnection","_XHR","pollId","init","response","pollSubscriptions","subscriptionTimeout","p","n","statusText","internal","xhr","responded","abort","open","setRequestHeader","onerror","ontimeout","onreadystatechange","responseText","UserRejectedRequestError","FrameConnector","kwargs","handleNetworkChanged","chainId","networkId","handleChainChanged","handleAccountsChanged","account","handleClose","ethProvider","deactivate"],"mappings":"gLAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEZ,oB,oHALJ,WAcYC,YAENC,yBAAyBC,IAAzBD,2B,KAEF,KAAUC,IAAV,W,EAlBJ,UAqBYC,YAENF,yBAAyBC,IAAzBD,0B,KAEF,KAAUC,IAAV,U,EAzBJ,eA4BYE,WAENH,yBAAyBC,IAAzBD,gB,KAEF,KAAUC,IAAV,a,EAhCJ,kB,qBCHA,IAAMG,EAAUC,EAAQ,MAClBC,EAAWD,EAAQ,MACnBE,EAAUF,EAAQ,MAElBG,EAAW,CACfC,SAA4B,qBAAXC,QAAqD,qBAApBA,OAAOD,SAA2BC,OAAOD,SAAW,KACtGE,KAAwB,qBAAXD,QAAiD,qBAAhBA,OAAOC,KAAuBD,OAAOC,KAAKC,gBAAkB,MAEtGC,EAAuB,qBAAXH,QAAsD,qBAArBA,OAAOI,UAA4BJ,OAAOI,UAAY,KACnGC,EAAwB,qBAAXL,QAA2D,qBAA1BA,OAAOM,eAAiCN,OAAOM,eAAiB,KAEhHR,EAASC,WAAUD,EAASC,SAASQ,cAAe,GAExD,IAAMC,EAAc,CAClBV,SAAUA,EAASC,UAAYJ,EAAQ,KAARA,CAAkCG,EAASG,MAC1EQ,IAAKd,EAAQ,KAARA,CAAqC,iDAC1CQ,GAAIR,EAAQ,KAARA,CAA4BQ,GAChCO,KAAMf,EAAQ,KAARA,CAA8BU,IAGtCM,EAAOC,QAAU,eAACC,EAAD,uDAAW,CAAC,WAAY,SAAUC,EAAlC,uDAA4C,GAA5C,OAAmDlB,EAASY,EAAad,EAAQmB,EAAShB,GAAUiB,K,kCCpB/GC,EAAc,SAAAC,GAClB,MAAiB,aAAbA,EAAgC,WAChCA,EAASC,SAAS,QAAgB,MAClCD,EAASE,WAAW,WAAaF,EAASE,WAAW,SAAiB,KACtEF,EAASE,WAAW,aAAeF,EAASE,WAAW,WAAmB,OACvE,IAGTP,EAAOC,QAAU,SAACC,EAAShB,GAAY,MACrC,OAAO,MAAGsB,OAAH,UAAa,GAAGA,OAAON,GAASO,KAAI,SAAAxB,GACzC,OAAIC,EAAQD,GACHC,EAAQD,GAAUwB,KAAI,SAAAJ,GAAQ,MAAK,CAAEK,KAAMzB,EAAUoB,WAAUM,SAAUP,EAAYC,OAErF,CAAEK,KAAM,SAAUL,SAAUpB,EAAU0B,SAAUP,EAAYnB,SAEnE2B,QAAO,SAAA3B,GACT,SAAIA,EAAS0B,UAA8B,aAAlB1B,EAASyB,QAGhC/B,QAAQkC,IAAI,qDAAuD5B,EAASoB,SAAW,MAChF,Q,yCCpBPS,EAAe9B,EAAQ,KACvB+B,EAAmB/B,EAAQ,MAC3BgC,EAAoBhC,EAAQ,MAE5BiC,EAAU,SAAAhC,GACd,SAASiC,EAAQC,GACflC,EAASkC,OAASA,EACdlC,aAAoB6B,GAAc7B,EAASmC,KAAK,SAAUD,GAHtC,SAKXE,IALW,+DAK1B,gFACMpC,EAASqC,QADf,yCAC+BC,WAAWF,EAAO,MADjD,gCAGcpC,EAASuC,KAAK,eAH5B,mCAIMN,EAAO,WACPK,YAAW,kBAAMF,MAAS,KALhC,wBAOMH,EAAO,aAPb,0DAUIA,EAAO,gBAVX,2DAL0B,sBAsB1B,OAJAA,EAAO,WACPG,IACApC,EAASwC,GAAG,WAAW,kBAAMJ,OAC7BpC,EAASwC,GAAG,SAAS,kBAAMP,EAAO,mBAC3BjC,GAGTe,EAAOC,QAAU,SAACJ,EAAaK,EAASC,GAEtC,GAAIN,EAAYV,SAASS,cAAgBM,EAAQO,KAAI,SAAAiB,GAAC,OAAIA,EAAEhB,QAAMiB,QAAQ,aAAe,EAEvF,cADO9B,EAAYV,SAASS,aACrBqB,EAAQpB,EAAYV,UAE7B,IAAMF,EAAW,IAAI8B,EAAiB,IAAIC,EAAkBnB,EAAaK,EAASC,IAElF,OADAlB,EAAS2C,gBAAgB,KAClBX,EAAQhC,K,oFCnCX8B,E,2CACJ,WAAac,GAAY,wBACvB,gBACKC,WAAY,EACjB,EAAKC,OAAS,EACd,EAAKC,SAAW,GAChB,EAAKC,cAAgB,GACrB,EAAKJ,WAAaA,EAClB,EAAKA,WAAWJ,GAAG,WAAW,kBAAM,EAAKS,qBACzC,EAAKL,WAAWJ,GAAG,SAAS,kBAAM,EAAKL,KAAK,YAC5C,EAAKS,WAAWJ,GAAG,WAAW,SAAAU,GAC5B,IAAQC,EAA8BD,EAA9BC,GAAIC,EAA0BF,EAA1BE,OAAQC,EAAkBH,EAAlBG,MAAOC,EAAWJ,EAAXI,OACT,qBAAPH,EACL,EAAKJ,SAASI,KAChBD,EAAQG,MAAQ,EAAKN,SAASI,GAAII,OAAOF,GAAS,EAAKN,SAASI,GAAIrD,QAAQwD,UACrE,EAAKP,SAASI,IAEdC,GAAUA,EAAOV,QAAQ,kBAAoB,IACtD,EAAKP,KAAKe,EAAQM,OAAOC,aAAcP,EAAQM,OAAOF,QACtD,EAAKnB,KAAKiB,EAAQF,EAAQM,QAC1B,EAAKrB,KAAK,OAAQe,OAGtB,EAAKV,GAAG,eAAe,SAACkB,EAAOC,GACf,mBAAVD,GACG,EAAKE,8BAAgC,EAAKf,WAAW,EAAKgB,2BAC5C,oBAAVH,IACJ,EAAKI,+BAAiC,EAAKjB,WAAW,EAAKkB,+BA1B7C,E,oEA8BzB,iGAEIC,KAFJ,SAE+BA,KAAKC,MAAM,eAF1C,wBAES9B,KAFT,UAEc,UAFd,MAGI6B,KAAKnB,WAAY,EACbmB,KAAKE,cAAc,oBAAsBF,KAAKJ,8BAA8BI,KAAKH,2BACjFG,KAAKE,cAAc,qBAAuBF,KAAKF,+BAA+BE,KAAKD,4BAL3F,kDAOIC,KAAKnB,WAAY,EAPrB,0D,uHAUA,gGACEmB,KAAKJ,8BAA+B,EADtC,kBAG+BI,KAAKG,UAAU,gBAAiB,kBAH/D,OAGQC,EAHR,OAIIJ,KAAKxB,GAAG4B,GAAgB,SAAAC,GAAK,OAAI,EAAKlC,KAAK,iBAAkBkC,MAJjE,gDAMI3E,QAAQ4E,KAAK,wCAAb,MANJ,yD,wHASA,gGACEN,KAAKF,+BAAgC,EADvC,kBAGgCE,KAAKG,UAAU,gBAAiB,mBAHhE,OAGQI,EAHR,OAIIP,KAAKxB,GAAG+B,GAAiB,SAAAC,GAAQ,OAAI,EAAKrC,KAAK,kBAAmBqC,MAJtE,gDAMI9E,QAAQ4E,KAAK,yCAAb,MANJ,yD,0EASA,WAAU,WACR,OAAO,IAAIG,SAAQ,SAAC3E,EAASyD,GAC3B,EAAKU,MAAM,gBAAgBS,MAAK,SAAAF,GAC9B,GAAIA,EAASG,OAAS,EACpB,EAAKH,SAAWA,EAChB,EAAKI,SAAWJ,EAAS,GACzB,EAAKrC,KAAK,UACVrC,EAAQ0E,OACH,CACL,IAAMK,EAAM,IAAIC,MAAM,6BACtBD,EAAIE,KAAO,KACXxB,EAAOsB,OAERG,MAAMzB,Q,mBAGb,SAAOH,GAAqB,WAAbI,EAAa,uDAAJ,GACtB,IAAKJ,GAA4B,kBAAXA,EAAqB,OAAO,IAAI0B,MAAM,iCAC5D,KAAMtB,aAAkByB,OAAQ,OAAO,IAAIH,MAAM,gCACjD,IAAM5B,EAAU,CAAEgC,QAAS,MAAO/B,GAAIa,KAAKlB,SAAUM,SAAQI,UACvD2B,EAAU,IAAIV,SAAQ,SAAC3E,EAASyD,GAAa,EAAKR,SAASG,EAAQC,IAAM,CAAErD,UAASyD,aAE1F,OADAS,KAAKpB,WAAWL,KAAKW,GACdiC,I,kBAET,WACE,OAAOnB,KAAKC,MAAL,MAAAD,KAAA,a,wBAET,SAAYoB,GAAU,WACpB,OAAOX,QAAQY,IAAID,EAAS5D,KAAI,SAAA0B,GAAO,OAAI,EAAKe,MAAMf,EAAQE,OAAQF,EAAQM,c,uBAEhF,SAAW/B,EAAM2B,GAAqB,WAAbI,EAAa,uDAAJ,GAChC,OAAOQ,KAAKC,MAAMxC,EAAX,CAAkB2B,GAAlB,SAA6BI,KAASkB,MAAK,SAAAvB,GAEhD,OADA,EAAKH,cAAcsC,KAAKnC,GACjBA,O,yBAGX,SAAa1B,EAAM0B,GAAI,WACrB,OAAOa,KAAKC,MAAMxC,EAAM,CAAC0B,IAAKuB,MAAK,SAAAa,GACjC,GAAIA,EAGF,OAFA,EAAKvC,cAAgB,EAAKA,cAAcrB,QAAO,SAAA6D,GAAG,OAAIA,IAAQrC,KAC9D,EAAKsC,mBAAmBtC,GACjBoC,O,uBAIb,SAAWrC,EAASwC,GAClB,OAAKA,GAAoB,oBAAPA,EACbxC,EAGDA,aAAmB+B,MACdjB,KAAK2B,eAAezC,EAASwC,GAE7B1B,KAAKC,MAAMf,EAAQE,OAAQF,EAAQM,QAAQkB,MAAK,SAAApB,GACrDoC,EAAG,KAAM,CAAEvC,GAAID,EAAQC,GAAI+B,QAAShC,EAAQgC,QAAS5B,cACpD0B,OAAM,SAAAH,GACPa,EAAGb,MATca,EAAG,IAAIZ,MAAM,oBADUY,EAAG,IAAIZ,MAAM,0D,4BAc3D,SAAgB5B,EAASwC,GACvB,OAAO1B,KAAK4B,WAAW1C,GAASwB,MAAK,SAACmB,GACpC,IAAIvC,EAASuC,EAAQrE,KAAI,SAACsE,EAAOC,GAC/B,MAAO,CAAE5C,GAAID,EAAQ6C,GAAO5C,GAAI+B,QAAShC,EAAQ6C,GAAOb,QAAS5B,OAAQwC,MAE3EJ,EAAG,KAAMpC,MACR0B,OAAM,SAAAH,GACPa,EAAGb,Q,yBAGP,WACE,OAAOb,KAAKnB,Y,mBAEd,WAAS,WACPmB,KAAKpB,WAAWoD,QAChBhC,KAAKnB,WAAY,EACjB,IAAIQ,EAAQ,IAAIyB,MAAJ,+DACZd,KAAKhB,cAAciD,SAAQ,SAAA9C,GAAE,OAAI,EAAKhB,KAAKgB,EAAIE,MAC/CW,KAAKhB,cAAgB,O,GA3IJjD,EAAQ,MA+I7BgB,EAAOC,QAAUc,G,2DC/IXD,EAAe9B,EAAQ,KAIvBgC,E,2CACJ,WAAanB,EAAaK,EAASC,GAAS,wBAC1C,gBACKD,QAAUA,EACf,EAAKL,YAAcA,EACnB,EAAKiC,WAAY,EACjB,EAAKX,OAAS,UACd,EAAKgE,SAAWhF,EAAQgF,UAAY,IACpC,EAAKC,KAAOjF,EAAQiF,MAAQ,UAC5B,EAAK9D,SAAU,EACf,EAAK+D,UATqC,E,iCAY5C,WAAoB,WAAXL,EAAW,uDAAH,EAGf,GAFqB,IAAVA,GAAarG,QAAQkC,IAAR,qEAA0EoC,KAAKmC,OAEnGnC,KAAKpB,YAAyC,cAA3BoB,KAAKpB,WAAWV,QAA0B6D,GAAS/B,KAAKpB,WAAWmD,MAC/ErG,QAAQkC,IAAI,iGAChB,GAA4B,IAAxBoC,KAAK/C,QAAQ0D,OACbjF,QAAQkC,IAAI,iCAChB,CACL,MAA+BoC,KAAK/C,QAAQ8E,GAApCrE,EAAR,EAAQA,SAAUN,EAAlB,EAAkBA,SAClB4C,KAAKpB,WAAaoB,KAAKpD,YAAYc,GAAUN,GAE7C4C,KAAKpB,WAAWJ,GAAG,SAAS,SAAAqC,GAC1B,OAAK,EAAKhC,UACN,EAAKqB,cAAc,SAAiB,EAAK/B,KAAK,QAAS0C,QAC3DnF,QAAQ4E,KAAK,6CAA+CO,EAAIwB,SAFpC,EAAKC,gBAAgBP,EAAOlB,MAK1Db,KAAKpB,WAAWJ,GAAG,SAAS,SAAC+D,GAC3B,EAAK1D,WAAY,EACjB,EAAKV,KAAK,SACL,EAAKqE,SAAS,EAAKC,aAG1BzC,KAAKpB,WAAWJ,GAAG,WAAW,WAC5B,EAAKI,WAAW8D,OAAS,EAAKzF,QAAQ8E,GACtC,EAAKnD,WAAWmD,MAAQA,EACxB,EAAK9E,QAAQ8E,GAAO7D,OAAS,EAAKU,WAAWV,OAC7C,EAAKW,WAAY,EACjB,EAAKR,SAAU,EACN3C,QAAQkC,IAAI,8BAAgC,EAAKX,QAAQ8E,GAAO3E,UACzE,EAAKe,KAAK,cAGZ6B,KAAKpB,WAAWJ,GAAG,QAAQ,SAAAmE,GAAI,OAAI,EAAKxE,KAAK,OAAQwE,MACrD3C,KAAKpB,WAAWJ,GAAG,WAAW,SAAAU,GAAO,OAAI,EAAKf,KAAK,UAAWe,S,qBAIlE,WAAmC,WAA1BgD,EAA0B,uDAAflC,KAAKkC,SACdxG,QAAQkC,IAAR,gCAAqCsE,EAAW,KAAMU,QAAQ,GAA9D,oBACTC,aAAa7C,KAAK8C,cAClB9C,KAAK8C,aAAexE,YAAW,kBAAM,EAAK8D,YAAWF,K,6BAGvD,SAAiBH,EAAOlB,GACtBb,KAAK/C,QAAQ8E,GAAO7D,OAAS2C,EACzBb,KAAK/C,QAAQ0D,OAAS,IAAMoB,GAC9B/B,KAAK3B,SAAU,EACN3C,QAAQ4E,KAAK,iFAAkFN,KAAK/C,SAC7G+C,KAAKyC,WAELzC,KAAKoC,UAAUL,K,mBAInB,WACE/B,KAAKwC,SAAU,EACXxC,KAAKpB,WACPoB,KAAKpB,WAAWoD,QAEhBhC,KAAK7B,KAAK,SAEZ0E,aAAa7C,KAAK8C,gB,mBAGpB,SAAO5D,EAASmD,GAAoB,IAAXtB,EAAW,wDAAH,EAC/Bf,KAAK7B,KAAK,UAAW,CAAEgB,GAAID,EAAQC,GAAI+B,QAAShC,EAAQgC,QAAS7B,MAAO,CAAEgD,UAAStB,Y,kBAGrF,SAAM7B,GAAS,WACTc,KAAK3B,QACPC,YAAW,kBAAM,EAAKC,KAAKW,KAAU,KAC5Bc,KAAKpB,WAAWmE,OACzB/C,KAAKX,MAAMH,EAAS,iBAEpBc,KAAKpB,WAAWL,KAAKW,O,GAxFKrB,GA6FhCd,EAAOC,QAAUe,G,mBCjGjBhB,EAAOC,QAAU,CACfd,SAAU,CAAC,YACX8G,MAAO,CAAC,sBAAuB,yBAC/BC,OAAQ,CAAC,sBAAuB,yBAChCC,OAAQ,CAAC,iEAAkE,iEAC3EC,cAAe,CAAC,iEAAkE,iEAClFC,cAAe,CAAC,iEAAkE,iEAClFC,YAAa,CAAC,+DAAgE,iE,2DCL1EC,E,2CACJ,WAAaC,EAAWrG,GAAS,uBAC/B,eACIqG,EACFjF,YAAW,kBAAM,EAAKH,KAAK,QAAS,IAAI2C,MAAM,wDAAuD,GAErGxC,YAAW,kBAAM,EAAKH,KAAK,QAAS,IAAI2C,MAAM,iCAAgC,GALjD,E,aAHd/E,EAAQ,MAa7BgB,EAAOC,QAAU,SAAAd,GAAQ,OAAI,SAAAgB,GAAO,OAAI,IAAIoG,EAAmBpH,EAAUgB,M,2DCXnEsG,E,2CACJ,WAAanB,GAAS,uBACpB,eACA/D,YAAW,kBAAM,EAAKH,KAAK,QAAS,IAAI2C,MAAMuB,MAAW,GAFrC,E,aAHHtG,EAAQ,MAS7BgB,EAAOC,QAAU,SAAAqF,GAAO,OAAI,kBAAM,IAAImB,EAAsBnB,M,yBCLxD7F,E,kCAJEqB,EAAe9B,EAAQ,KACvB0H,EAAQ1H,EAAQ,MAKhB2H,E,2CACJ,WAAaC,EAAYC,EAAK1G,GAAS,uBACrC,eACAV,EAAYmH,EACZrF,YAAW,kBAAM,EAAKuF,OAAOD,EAAK1G,KAAU,GAHP,E,gCAMvC,SAAQ0G,EAAK1G,GAAS,WACfV,GAAWwD,KAAK7B,KAAK,QAAS,IAAI2C,MAAM,qCAC7C,IAAMd,KAAK8D,OAAS,IAAItH,EAAUoH,GAAO,MAAOG,GAAK,OAAO/D,KAAK7B,KAAK,QAAS4F,GAC/E/D,KAAK8D,OAAOE,iBAAiB,SAAS,SAAAnD,GAAG,OAAI,EAAK1C,KAAK,QAAS0C,MAChEb,KAAK8D,OAAOE,iBAAiB,QAAQ,WACnC,EAAK7F,KAAK,WACV,EAAK2F,OAAOE,iBAAiB,WAAW,SAAA3B,GACtC,IAAMM,EAA+B,kBAAjBN,EAAQM,KAAoBN,EAAQM,KAAO,GAC/Dc,EAAMd,GAAM,SAAC9B,EAAKoD,GACZpD,GACJoD,EAAShC,SAAQ,SAAAiC,GACXjD,MAAMkD,QAAQD,GAChBA,EAAKjC,SAAQ,SAAA/C,GAAO,OAAI,EAAKf,KAAK,UAAWe,MAE7C,EAAKf,KAAK,UAAW+F,YAK7B,EAAKJ,OAAOE,iBAAiB,SAAS,kBAAM,EAAKI,kB,qBAIrD,WACEpE,KAAK8D,OAAS,KACd9D,KAAK+C,QAAS,EACLrH,QAAQkC,IAAI,gCACrBoC,KAAK7B,KAAK,SACV6B,KAAKyB,uB,mBAGP,WACMzB,KAAK8D,OACP9D,KAAK8D,OAAO9B,QAEZhC,KAAKoE,Y,mBAIT,SAAOlF,EAASmD,GAAoB,IAAXtB,EAAW,wDAAH,EAC/Bf,KAAK7B,KAAK,UAAW,CAAEgB,GAAID,EAAQC,GAAI+B,QAAShC,EAAQgC,QAAS7B,MAAO,CAAEgD,UAAStB,Y,kBAGrF,SAAM7B,GAAS,WACTc,KAAK8D,QAAU9D,KAAK8D,OAAOO,aAAerE,KAAK8D,OAAOQ,WACxDhG,YAAW,SAAAiG,GAAC,OAAI,EAAKhG,KAAKW,KAAU,KAC1Bc,KAAK8D,QAAU9D,KAAK8D,OAAOO,WAAa,GAClDrE,KAAKnB,WAAY,EACjBmB,KAAKX,MAAMH,EAAS,kBAEpBc,KAAK8D,OAAOvF,KAAKiG,KAAKC,UAAUvF,Q,GAzDJrB,GA8DlCd,EAAOC,QAAU,SAAAR,GAAS,OAAI,SAACoH,EAAKlC,GAAN,OAAa,IAAIgC,EAAoBlH,EAAWoH,EAAKlC,M,mBCpEnF,IAAIgD,EAAMC,EAEV5H,EAAOC,QAAU,SAAC4H,EAAKlD,GACrB,IAAMmD,EAAS,GACfD,EACGE,QAAQ,eAAgB,UACxBA,QAAQ,mBAAoB,YAC5BA,QAAQ,iBAAkB,WAC1BA,QAAQ,iBAAkB,WAC1BC,MAAM,QACN9C,SAAQ,SAAAU,GAEP,IAAIrD,EADAoF,IAAM/B,EAAO+B,EAAO/B,GAExB,IACErD,EAASkF,KAAKf,MAAMd,GACpB,MAAOoB,GAIP,OAHAW,EAAO/B,EACPE,aAAa8B,QACbA,EAAUrG,YAAW,kBAAMoD,EAAG,IAAIZ,MAAM,6BAA4B,OAGtE+B,aAAa8B,GACbD,EAAO,KACHpF,GAAQuF,EAAOvD,KAAKhC,MAE5BoC,EAAG,KAAMmD,K,yBCpBPpI,E,kCALEoB,EAAe9B,EAAQ,KACvBiJ,EAAOjJ,EAAQ,KAMfkJ,E,2CACJ,WAAaC,EAAMtB,EAAK1G,GAAS,uBAC/B,eACAT,EAAMyI,EACN,EAAKrG,WAAY,EACjB,EAAKG,eAAgB,EACrB,EAAKd,OAAS,UACd,EAAK0F,IAAMA,EACX,EAAKuB,OAASH,IACd1G,YAAW,kBAAM,EAAKuF,WAAU,GARD,E,gCAWjC,WAAU,WACR,IAAKpH,EAAK,OAAOuD,KAAK7B,KAAK,QAAS,IAAI2C,MAAM,gCAC9Cd,KAAKxB,GAAG,SAAS,WAAY,EAAKK,WAAW,EAAKmD,WAClDhC,KAAKoF,S,kBAGP,WAAQ,WACNpF,KAAKzB,KAAK,CAAE2C,QAAS,MAAO9B,OAAQ,cAAeI,OAAQ,GAAIL,GAAI,IAAK,SAAC0B,EAAKwE,GAC5E,GAAIxE,EAAK,OAAO,EAAK1C,KAAK,QAAS0C,GACnC,EAAKtC,KAAK,CAAE2C,QAAS,MAAO/B,GAAI,EAAGC,OAAQ,wBAAyBI,OAAQ,CAAC,EAAK2F,OAAQ,eAAgB,SAACtE,EAAKwE,GACzGxE,IACH,EAAK7B,eAAgB,EACrB,EAAKsG,qBAEP,EAAKzG,WAAY,EACjB,EAAKV,KAAK,mB,+BAKhB,WAAqB,WACnB6B,KAAKzB,KAAK,CAAE2C,QAAS,MAAO/B,GAAI,EAAGC,OAAQ,wBAAyBI,OAAQ,CAACQ,KAAKmF,UAAW,SAACtE,EAAKvB,GACjG,GAAIuB,EAEF,OADA,EAAK0E,oBAAsBjH,YAAW,kBAAM,EAAKgH,sBAAqB,KAC/D,EAAKnH,KAAK,QAAS0C,GAErB,EAAKkC,SAAQ,EAAKwC,oBAAsB,EAAKD,qBAC9ChG,GACFA,EAAO9B,KAAI,SAAAgI,GACT,IAAI/B,EACJ,IAAMA,EAAQe,KAAKf,MAAM+B,GAAK,MAAOzB,GAAKN,GAAQ,EAClD,OAAOA,KACN9F,QAAO,SAAA8H,GAAC,OAAIA,KAAGxD,SAAQ,SAAAuD,GAAC,OAAI,EAAKrH,KAAK,UAAWqH,W,mBAM5D,WACW9J,QAAQkC,IAAI,2BACrBoC,KAAK+C,QAAS,EACd/C,KAAK7B,KAAK,SACV0E,aAAa7C,KAAKuF,qBAClBvF,KAAKyB,uB,0BAGP,SAAcmD,GACZ,GAAIA,EAAI1G,QAAU,KAAO0G,EAAI1G,OAAS,IAAK,OAAO0G,EAClD,IAAMvF,EAAQ,IAAIyB,MAAM8D,EAAIc,YAE5B,MADArG,EAAMuF,IAAMA,EACNvF,EAAMgD,U,mBAGd,SAAOnD,EAASmD,GAAoB,IAAXtB,EAAW,wDAAH,EAC/Bf,KAAK7B,KAAK,UAAW,CAAEgB,GAAID,EAAQC,GAAI+B,QAAShC,EAAQgC,QAAS7B,MAAO,CAAEgD,UAAStB,Y,kBAGrF,SAAM7B,EAASyG,GAAU,WACvB,GAAI3F,KAAK+C,OAAQ,OAAO/C,KAAKX,MAAMH,EAAS,iBAC5C,GAAuB,kBAAnBA,EAAQE,OAA4B,CACtC,IAAIY,KAAKhB,cAGP,OAAOgB,KAAKX,MAAMH,EAAS,yDAF3BA,EAAQiG,OAASnF,KAAKmF,OAK1B,IAAMS,EAAM,IAAInJ,EACZoJ,GAAY,EACVjB,EAAM,SAAC/D,EAAKvB,GAChB,IAAKuG,EAGH,GAFAD,EAAIE,QACJD,GAAY,EACRF,EACFA,EAAS9E,EAAKvB,OACT,CACL,IAAQH,EAAgBD,EAAhBC,GAAI+B,EAAYhC,EAAZgC,QACNgD,EAAOrD,EAAM,CAAE1B,KAAI+B,UAAS7B,MAAO,CAAEgD,QAASxB,EAAIwB,QAAStB,KAAMF,EAAIE,OAAW,CAAE5B,KAAI+B,UAAS5B,UACrG,EAAKnB,KAAK,UAAW+F,KAI3B0B,EAAIG,KAAK,OAAQ/F,KAAK4D,KAAK,GAC3BgC,EAAII,iBAAiB,eAAgB,oBACrCJ,EAAIjB,QAAU,IACdiB,EAAIK,QAAUrB,EACdgB,EAAIM,UAAYtB,EAChBgB,EAAIO,mBAAqB,WACvB,GAAuB,IAAnBP,EAAIvB,WACN,IACE,IAAMgB,EAAWb,KAAKf,MAAMmC,EAAIQ,cAChCxB,EAAIS,EAAShG,MAAOgG,EAAS/F,QAC7B,MAAOyE,GACPa,EAAIb,KAIV6B,EAAIrH,KAAKiG,KAAKC,UAAUvF,Q,GA5GCrB,GAgH7Bd,EAAOC,QAAU,SAAAP,GAAG,OAAI,SAACmH,EAAK1G,GAAN,OAAkB,IAAI+H,EAAexI,EAAKmH,EAAK1G,M,gjDXlH1DmJ,EAAb,YACE,a,aACE,sBACA,KAAY,cAAZ,KACA,2C,EAJJ,2BAQaC,EAAb,YAGE,c,aACE,IAAUC,4BAAV,aAAU,EAAV,0DACA,wBAEA,qBAA4B,8BAA5B,IACA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,IACA,cAAmB,qBAAnB,I,EAVJ,uDAaUC,YAEJ9K,8DAEFsE,KAAA,WAAgB,CAAEhE,SAAUgE,KAAZ,SAA2ByG,QAASC,KAjBxD,qBAoBUC,YAEJjL,4DAEFsE,KAAA,WAAgB,CAAEyG,aAxBtB,wBA2BUG,YAEJlL,+DAEFsE,KAAA,WAAgB,CAAE6G,QAASrG,kBAA+BA,EAAS,MA/BvE,cAkCUsG,cAEJpL,uDAEFsE,KAAA,kBAtCJ,0B,MA0CSA,K,OAAA,EAAL,WACE,WAAgB+G,IAAhB,UAGF,+BACwB,EADxB,wCAEsB,EAFtB,yCAGyB,EAHzB,kCAIe,EAJf,a,gBAMsB,0BAEd,mBAAgCvG,EAAhC,MAFc,OAGb,YACL,MAAInB,GAAJ,OAAcA,OACN,IAAN,EAEA,MAPgB,eAAhBwH,GAWN,MAAO,CAAE7K,SAAU,EAAZ,SAA2B6K,cA/DtC,MAAA9C,GAAA,sBAAAA,KAAA,6BAmEI,uBAAO/D,KAAP,UAnEJ,MAAA+D,GAAA,sBAAAA,KAAA,4BAuEI,uBAAO/D,KAAA,cAAP,gBAvEJ,MAAA+D,GAAA,sBAAAA,KAAA,4BA2EI,uBAAO/D,KAAA,oCAAwC,mBAAgCQ,EAAhC,OA3EnD,MAAAuD,GAAA,sBAAAA,KAAA,aA8ESiD,WACLhH,KAAA,yCACoCA,KADpC,oDAEkCA,KAFlC,qDAGqCA,KAHrC,8CAI2BA,KAJ3B,cA/EJ","file":"static/js/21.e3eea417.chunk.js","sourcesContent":["import { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport ethProvider from 'eth-provider'\nimport invariant from 'tiny-invariant'\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nexport class FrameConnector extends AbstractConnector {\n  private provider: any\n\n  constructor(kwargs: Required<AbstractConnectorArguments>) {\n    invariant(kwargs.supportedChainIds.length === 1, 'This connector only supports 1 chainId at the moment.')\n    super(kwargs)\n\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  private handleNetworkChanged(networkId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'networkChanged' event with payload\", networkId)\n    }\n    this.emitUpdate({ provider: this.provider, chainId: networkId })\n  }\n\n  private handleChainChanged(chainId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts.length === 0 ? null : accounts[0] })\n  }\n\n  private handleClose(code: number, reason: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'close' event with payload\", code, reason)\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      this.provider = ethProvider('frame')\n    }\n\n    this.provider\n      .on('networkChanged', this.handleNetworkChanged)\n      .on('chainChanged', this.handleChainChanged)\n      .on('accountsChanged', this.handleAccountsChanged)\n      .on('close', this.handleClose)\n\n    const account = await this.provider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        if (error && (error as any).code === 4001) {\n          throw new UserRejectedRequestError()\n        } else {\n          throw error\n        }\n      })\n\n    return { provider: this.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider\n      .removeListener('networkChanged', this.handleNetworkChanged)\n      .removeListener('chainChanged', this.handleChainChanged)\n      .removeListener('accountsChanged', this.handleAccountsChanged)\n      .removeListener('close', this.handleClose)\n  }\n}\n","const resolve = require('./resolve')\nconst provider = require('./provider')\nconst presets = require('./presets')\n\nconst injected = {\n  ethereum: typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' ? window.ethereum : null,\n  web3: typeof window !== 'undefined' && typeof window.web3 !== 'undefined' ? window.web3.currentProvider : null\n}\nconst ws = typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined' ? window.WebSocket : null\nconst XHR = typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined' ? window.XMLHttpRequest : null\n\nif (injected.ethereum) injected.ethereum.__isProvider = true\n\nconst connections = {\n  injected: injected.ethereum || require('./connections/injected')(injected.web3),\n  ipc: require('./connections/unavailable')('IPC connections are unavliable in the browser'),\n  ws: require('./connections/ws')(ws),\n  http: require('./connections/http')(XHR)\n}\n\nmodule.exports = (targets = ['injected', 'frame'], options = {}) => provider(connections, resolve(targets, presets), options)\n","const getProtocol = location => {\n  if (location === 'injected') return 'injected'\n  if (location.endsWith('.ipc')) return 'ipc'\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws'\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http'\n  return ''\n}\n\nmodule.exports = (targets, presets) => {\n  return [].concat(...[].concat(targets).map(provider => {\n    if (presets[provider]) {\n      return presets[provider].map(location => ({ type: provider, location, protocol: getProtocol(location) }))\n    } else {\n      return { type: 'custom', location: provider, protocol: getProtocol(provider) }\n    }\n  })).filter(provider => {\n    if (provider.protocol || provider.type === 'injected') {\n      return true\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"')\n      return false\n    }\n  })\n}\n","const EventEmitter = require('events')\nconst EthereumProvider = require('ethereum-provider')\nconst ConnectionManager = require('../ConnectionManager')\n\nconst monitor = provider => {\n  function update (status) {\n    provider.status = status\n    if (provider instanceof EventEmitter) provider.emit('status', status)\n  }\n  async function check () {\n    if (provider.inSetup) return setTimeout(check, 1000)\n    try {\n      if (await provider.send('eth_syncing')) {\n        update('syncing')\n        setTimeout(() => check(), 5000)\n      } else {\n        update('connected')\n      }\n    } catch (e) {\n      update('disconnected')\n    }\n  }\n  update('loading')\n  check()\n  provider.on('connect', () => check())\n  provider.on('close', () => update('disconnected'))\n  return provider\n}\n\nmodule.exports = (connections, targets, options) => {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(t => t.type).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider\n    return monitor(connections.injected)\n  }\n  const provider = new EthereumProvider(new ConnectionManager(connections, targets, options))\n  provider.setMaxListeners(128)\n  return monitor(provider)\n}\n","const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n","const EventEmitter = require('events')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location)\n\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err)\n        if (this.listenerCount('error')) return this.emit('error', err)\n        console.warn('eth-provider - Uncaught connection error: ' + err.message)\n      })\n\n      this.connection.on('close', (summary) => {\n        this.connected = false\n        this.emit('close')\n        if (!this.closing) this.refresh()\n      })\n\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected')\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n","module.exports = {\n  injected: ['injected'],\n  frame: ['ws://127.0.0.1:1248', 'http://127.0.0.1:1248'],\n  direct: ['ws://127.0.0.1:8546', 'http://127.0.0.1:8545'], // IPC paths will be prepended in Node/Electron\n  infura: ['wss://mainnet.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://mainnet.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRopsten: ['wss://ropsten.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://ropsten.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRinkeby: ['wss://rinkeby.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://rinkeby.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraKovan: ['wss://kovan.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://kovan.infura.io/v3/786ade30f36244469480aa5c2bf0743b']\n}\n","const EventEmitter = require('events')\n\nclass InjectedConnection extends EventEmitter {\n  constructor (_injected, options) {\n    super()\n    if (_injected) {\n      setTimeout(() => this.emit('error', new Error('Injected web3 provider is not currently supported')), 0)\n    } else {\n      setTimeout(() => this.emit('error', new Error('No injected provider found')), 0)\n    }\n  }\n}\n\nmodule.exports = injected => options => new InjectedConnection(injected, options)\n","const EventEmitter = require('events')\n\nclass UnavailableConnection extends EventEmitter {\n  constructor (message) {\n    super()\n    setTimeout(() => this.emit('error', new Error(message)), 0)\n  }\n}\n\nmodule.exports = message => () => new UnavailableConnection(message)\n","const EventEmitter = require('events')\nconst parse = require('../parse')\nconst dev = process.env.NODE_ENV === 'development'\n\nlet WebSocket\n\nclass WebSocketConnection extends EventEmitter {\n  constructor (_WebSocket, url, options) {\n    super()\n    WebSocket = _WebSocket\n    setTimeout(() => this.create(url, options), 0)\n  }\n\n  create (url, options) {\n    if (!WebSocket) this.emit('error', new Error('No WebSocket transport available'))\n    try { this.socket = new WebSocket(url) } catch (e) { return this.emit('error', e) }\n    this.socket.addEventListener('error', err => this.emit('error', err))\n    this.socket.addEventListener('open', () => {\n      this.emit('connect')\n      this.socket.addEventListener('message', message => {\n        const data = typeof message.data === 'string' ? message.data : ''\n        parse(data, (err, payloads) => {\n          if (err) return //\n          payloads.forEach(load => {\n            if (Array.isArray(load)) {\n              load.forEach(payload => this.emit('payload', payload))\n            } else {\n              this.emit('payload', load)\n            }\n          })\n        })\n      })\n      this.socket.addEventListener('close', () => this.onClose())\n    })\n  }\n\n  onClose () {\n    this.socket = null\n    this.closed = true\n    if (dev) console.log('Closing WebSocket connection')\n    this.emit('close')\n    this.removeAllListeners()\n  }\n\n  close () {\n    if (this.socket) {\n      this.socket.close()\n    } else {\n      this.onClose()\n    }\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n      setTimeout(_ => this.send(payload), 10)\n    } else if (!this.socket || this.socket.readyState > 1) {\n      this.connected = false\n      this.error(payload, 'Not connected')\n    } else {\n      this.socket.send(JSON.stringify(payload))\n    }\n  }\n}\n\nmodule.exports = WebSocket => (url, cb) => new WebSocketConnection(WebSocket, url, cb)\n","let last, timeout\n\nmodule.exports = (res, cb) => {\n  const values = []\n  res\n    .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n    .split('|--|')\n    .forEach(data => {\n      if (last) data = last + data // prepend the last chunk\n      let result\n      try {\n        result = JSON.parse(data)\n      } catch (e) {\n        last = data\n        clearTimeout(timeout) // restart timeout\n        timeout = setTimeout(() => cb(new Error('Parse response timeout')), 15 * 1000)\n        return\n      }\n      clearTimeout(timeout)\n      last = null\n      if (result) values.push(result)\n    })\n  cb(null, values)\n}\n","const EventEmitter = require('events')\nconst uuid = require('uuid/v4')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n  }\n\n  create () {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'eth_syncing', params: [], id: 1 }, (err, response) => {\n      if (err) return this.emit('error', err)\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n        this.connected = true\n        this.emit('connect')\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this.emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this.emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this.emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this.emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n"],"sourceRoot":""}